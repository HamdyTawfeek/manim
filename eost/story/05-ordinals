There is just one true well-ordering
====================================

Quote: All that is actually completely trivial. What is difficult is to realize it. -- unnamed math professor

:-------------------SimultaneousRecursion----------------------------
. In the last chapter, we discussed well-ordered sets. It is such a set
. that transfinite recursion can run through all of its elements even
. though it does not cover the full world of transfinite
. recursion. It makes sense that some well-ordered sets are longer than
. others, that the transfinite recursion will run on them for longer
. time in some sense. We start this chapter by examining
. this comparison in more detail.
.
. Let's take two well-ordered sets and run the transfinite recursion
. simultaneously on both of them. That is, we proceed the zero case at
. the same time, then the first successor step at the same time, then
. the second, and so on. We stop at the moment when one of the set is
. filled. Either the recursion fills the whole second set and a proper
. initial segment of the first one,
. or vice versa, the first set is filled and some bars of the other one remained,
. or the transfinite recursion finishes both of them at the same time.
.
. But the simultaneous recursion gived us something more than just the final
. result. For every processed element in the first set, there is a
. corresponding element of the second set. That means that we can align
. these sets so that they actually looks the same.
.
. This appearance up to alignment, which is actually the same thing as
. the length in transfinite recursion is measured by so called ordinal
. numbers, shortly ordinals.
. There is another view of what this represents.
:---------------------OrdinalMatching---------------------------
. If there is an order preserving matching
. between two well-ordered sets A, B, that is without crossing, we say
. that their order type is the same ordinal number.
. :{type(A) = type(B)}
. The matching is equivalent to checking that these
. two sets can be aligned one above the other without reordering. If, on
. the other hand, we match the set B just with a proper initial segment
. of A, we say that the order type of A is bigger that the one of B.
. :{type(A) > type(B)}
.
. You may registered the similarity between that and the cardinal
. numbers discussed in chapters 2 and 3. So let's look at it. It is
. similar but not the same.
.
. We say that two sets A and B are of the same cardinality if there is
. a perfect matching between them. But this time, we don't care about
. the ordering of the element, we can reorder the set A and it still
. represents the same unordered set A with having same cardinality. In
. fact the ordering here is just our visualisation, it does not have
. to represent any inner structure of the set.
.
. On the other hand, ordinals measure ordered sets and it carries the
. information about the ordering. So for preserving
. the ordinal type we are just allowed to shift the bars but not
. to swap them.

It does not really matter in finite case. If we shuffle elements in a
finite ordered set, the result is still the same. There are still five
bars in one line.
So finite ordinal
numbers are identical with finite cardinal numbers, that is natural
numbers.

But it is easy to reorder an infinite well ordered set to obtain a
well ordered set of another type. The cardinality is still the same
but the ordinal type has changed.
That is because we have to examine all possible matchings to assure
whether the two sets have different size. It is not
neccessary for ordinal type, there is just one possible
order-preserving matching with an initial segment -- the one given by
the simultaneous transfinite recursion.

And then there are different motivations behind the abstractions of
set sizes or order types. We introduced cardinal numbers for
investigation of sizes of different sets such as natural numbers,
rational numbers, real numbers and so on. But ordinals are not
primarily intended for examining different well ordered sets. They are
useful for focusing on what is essential on well-ordering property,
the ordering itself, not the underlying set.

So from now on, we will use ordinals instead of well-ordered sets. We
will draw them in the same way as and the meaning is virtually the
same. Just keep in mind that the ordering is the only thing important
here and we don't change the ordinal number by adjusting the bars a
bit.

Now let's try a kind of circular idea and let's construct ordinals by
transfinite recursion. The base case is the empty ordinal zero. It is
a bit weird well-ordered set but it is technically correct, there is
no infinite decreasing sequence in the empty set, right? The successor
step is so called plus one operation, adding one element to the end.
So we get ordinals one, two, three, and all natural numbers.

What about the limit step?
For that, we need to return to the idea of alignment of ordinals. When
we have two different ordinals, then one of them actually represents
just an initial segment of the other. So when we merge them, we don't
get anything new. This operation, aligning ordinals to the left and
then merging them, is called supremum. When there s just a finite
number of ordinals, the result is just the largest one. But it become
to be interesting, when there are infinite number of ordinals, in our
case all natural numbers. The result cannot be the maximal number
because there is no such natural number. So the result of merging of
all of these ordinals is the least infinite ordinal of an infinite
increasing sequence. The set of natural numbers was chosen to
represent this ordinal, so we call it omega.

Then, we continue by the successor steps. Add one and get omega plus
one. Then omega plus two, omega plus three and so on. At the limit
step again merge all these and get omega plus omega.

Q:"It is not helping for constructing large ordinals."
A:"It is not, but it shows an interesting correspondence."

We cannot boost our ordinal creation by this approach since we need
the underlying ordinal large enough anyway. The nice thing here is
that we have got labeled the elements of the underlying ordinal by
another ordinal numbers. Ordinals have two roles --
they either represent order types of well ordered sets, or indices of
their elements.

There are several ways how to see this correspondence.
By the construction, the point at a position, say omega plus three, is
the one omega ... plus three steps from the first point. So indices actually
computes ordered number of steps from the first point.

Alternatively, each step can be identified with its starting
point. They form a proper initial segment and the corresponding
final point is the successor of the initial segment.

This is a bit different from usual ordering by naturals numbers,
right? It can be consufing. When we talk about forth element in the
natural language, we mean that we take four elements as an initial
segment and then pick the last of them. But this approach cannot work
for set theory. Some initial segments, like omega, does not have their
elements. That is why it is better to pick the successor which is
guaranteed to exist by the well-ordering property, even though it may
seem unnatural at first.

All right, ordinals can play two roles, either order types of a well
ordered sets, or indices. But indices to what exactly? It turns out
that it does not really matter. Every ordinal can play the index role
somewhere, in any larger ordinal. It does not matter on what
larger set exactly we run a recursion if we are interested just in the
result at, say omega plus five. The recursion runs omega plus five
successor steps to that point every time.

So ordinals represents indices of an universal well ordering. Ordinals
form the world of transfinite recursion as particular points of
it. This world of ordinals is unlimited. For some reasons which will
be discussed in later videos, we are not even allowed to make a set of
them. But it does not prevent us from running a recursion on all
ordinals.

At the end of the video, we let's see how the index view of ordinal
numbers is compatible with the supremum operation mentioned
recently. It is the operation which takes several ordinals, align them
to the left and merges them. In fact, we introduced supremum in a bit
non-standard way because we needed it. However the usual introduction
of ordinals goes as follows.

Take a subset of the real numbers, say the
closed interval minus one, one. This set has its maximum, that is the
point one. But not every set has a maximum, so we can want at least
something as close as possible. It is called the supremum. More
precisely, if there is a maximum, the supremum is that maximum. If, on
the other hand, the set does not contain a maximum, as in the example
of an open interval minus one, one, the supremum is the first element
after the set.

This definition works for ordinals as well. The supremum of a set of
ordinal indices is either the maximal index here, if there is one, or
the index just after the set.

Next time, we will examine ordinal addition and multiplication and see
whether a turtle can catch Achiles. See you then.
